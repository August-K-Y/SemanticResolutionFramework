package umbc.ebiquity.kang.lucene.test;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
import org.apache.lucene.analysis.tokenattributes.TermAttribute;

import umbc.ebiquity.kang.textprocessing.PorterStemmer;
import umbc.ebiquity.kang.textprocessing.SynonymPhraseCombiner;
import umbc.ebiquity.kang.textprocessing.TextProcessingUtils;


public class LucenceInActionTest {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		
		
		PorterStemmer stemmer = new PorterStemmer();
		PorterStopAnalyzer analyzer = new PorterStopAnalyzer();
		StringBuilder strBuilder = new StringBuilder();
		
		String text = "machine manufacturing industry";
		
		String[] wordlst = TextProcessingUtils.tokenizeLabel(text);

		List<String> synWordLst = SynonymPhraseCombiner.getSynonymPhraseList(wordlst);
		System.out.println("size: " + synWordLst.size());
		for (int j = 0; j < synWordLst.size(); j++) {
			System.out.println(synWordLst.get(j));
		}
		
//		for (int i = 0; i < wordlst.length; i++) {
//			strBuilder.append(stemmer.stem(wordlst[i]) + " ");
//		}
//		System.out.println(strBuilder.toString());
		
//		StringReader reader = new StringReader(strBuilder.toString());
//		TokenStream stream = analyzer.tokenStream("",reader);
//		TermAttribute term = stream.addAttribute(TermAttribute.class);
//		PositionIncrementAttribute posIncr = stream.addAttribute(PositionIncrementAttribute.class);
//		
//		int position = 0;
//		
//		while(stream.incrementToken()){
//			int increment = posIncr.getPositionIncrement();
//			System.out.print("increment: " + increment +"  ");
////			if(increment > 0){
////				position = position + increment;
////				System.out.println();
////				System.out.print(position + ": ");
////			}
//			
//			position = position + increment;
//			System.out.print(position + ": ");
//			System.out.println("["+term.term()+"]");
//		}
//		
//		System.out.println();

	}

}
